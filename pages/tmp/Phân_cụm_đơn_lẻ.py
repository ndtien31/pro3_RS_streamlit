import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Mapping cluster ID -> t√™n nh√≥m
cluster_labels = {
    3: "Kh√°ch h√†ng R·ªùi b·ªè",
    1: "Kh√°ch h√†ng M·ªõi",
    0: "Kh√°ch h√†ng B√¨nh th∆∞·ªùng",
    2: "Kh√°ch h√†ng VIP"
}

# Mapping chi·∫øn l∆∞·ª£c theo ph√¢n kh√∫c
retention_strategies = {
    "Kh√°ch h√†ng R·ªùi b·ªè": "G·ª≠i email gi·∫£m gi√°, kh·∫£o s√°t l√Ω do r·ªùi ƒëi, chƒÉm s√≥c l·∫°i b·∫±ng voucher.",
    "Kh√°ch h√†ng M·ªõi": "G·ª≠i welcome email, gi·ªõi thi·ªáu s·∫£n ph·∫©m hot, ch√≠nh s√°ch ∆∞u ƒë√£i l·∫ßn ƒë·∫ßu.",
    "Kh√°ch h√†ng B√¨nh th∆∞·ªùng": "G·ª≠i b·∫£n tin ƒë·ªãnh k·ª≥, ch∆∞∆°ng tr√¨nh t√≠ch ƒëi·ªÉm, g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p.",
    "Kh√°ch h√†ng VIP": "T·∫∑ng qu√† tri √¢n, ∆∞u ƒë√£i ƒë·ªôc quy·ªÅn, h·ªó tr·ª£ nhanh ch√≥ng, t·ªï ch·ª©c s·ª± ki·ªán ri√™ng."
}

# Load model v√† scaler
@st.cache_resource
def load_model():
    import joblib
    data = joblib.load('rfm_clustering_model.pkl')
    return data['kmeans'], data['scaler']

model, scaler = load_model()

st.title("üîç D·ª± ƒëo√°n Ph√¢n kh√∫c Kh√°ch h√†ng theo RFM")

st.write("Nh·∫≠p th√¥ng tin cho 5 kh√°ch h√†ng:")

# T·∫°o form nh·∫≠p d·ªØ li·ªáu
rfm_data = []
for i in range(5):
    st.subheader(f"Kh√°ch h√†ng {i+1}")
    recency = st.number_input(f"Recency (ng√†y) - KH {i+1}", min_value=0, value=30, key=f"r{i}")
    frequency = st.number_input(f"Frequency (s·ªë l·∫ßn mua) - KH {i+1}", min_value=0, value=5, key=f"f{i}")
    monetary = st.number_input(f"Monetary (gi√° tr·ªã mua h√†ng) - KH {i+1}", min_value=0.0, value=1000.0, key=f"m{i}")
    rfm_data.append([recency, frequency, monetary])

if st.button("üìä D·ª± ƒëo√°n c·ª•m kh√°ch h√†ng"):
    rfm_df = pd.DataFrame(rfm_data, columns=["Recency", "Frequency", "Monetary"])
    rfm_scaled = scaler.transform(rfm_df)
    clusters = model.predict(rfm_scaled)

    st.subheader("üéØ K·∫øt qu·∫£ d·ª± ƒëo√°n:")
    rfm_df["C·ª•m"] = clusters
    rfm_df["Ph√¢n lo·∫°i"] = rfm_df["C·ª•m"].map(cluster_labels)
    rfm_df["Chi·∫øn l∆∞·ª£c gi·ªØ ch√¢n"] = rfm_df["Ph√¢n lo·∫°i"].map(retention_strategies)

    st.dataframe(rfm_df)
