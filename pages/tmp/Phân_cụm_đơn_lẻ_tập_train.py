import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Mapping cluster ID -> t√™n nh√≥m
cluster_labels = {
    3: "Kh√°ch h√†ng R·ªùi b·ªè",
    1: "Kh√°ch h√†ng M·ªõi",
    0: "Kh√°ch h√†ng B√¨nh th∆∞·ªùng",
    2: "Kh√°ch h√†ng VIP"
}

# Mapping chi·∫øn l∆∞·ª£c theo ph√¢n kh√∫c
retention_strategies = {
    "Kh√°ch h√†ng R·ªùi b·ªè": "G·ª≠i email gi·∫£m gi√°, kh·∫£o s√°t l√Ω do r·ªùi ƒëi, chƒÉm s√≥c l·∫°i b·∫±ng voucher.",
    "Kh√°ch h√†ng M·ªõi": "G·ª≠i welcome email, gi·ªõi thi·ªáu s·∫£n ph·∫©m hot, ch√≠nh s√°ch ∆∞u ƒë√£i l·∫ßn ƒë·∫ßu.",
    "Kh√°ch h√†ng B√¨nh th∆∞·ªùng": "G·ª≠i b·∫£n tin ƒë·ªãnh k·ª≥, ch∆∞∆°ng tr√¨nh t√≠ch ƒëi·ªÉm, g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p.",
    "Kh√°ch h√†ng VIP": "T·∫∑ng qu√† tri √¢n, ∆∞u ƒë√£i ƒë·ªôc quy·ªÅn, h·ªó tr·ª£ nhanh ch√≥ng, t·ªï ch·ª©c s·ª± ki·ªán ri√™ng."
}

# Load model v√† scaler
@st.cache_resource
def load_model():
    data = joblib.load('rfm_clustering_model.pkl')
    return data['kmeans'], data['scaler']

# Load d·ªØ li·ªáu RFM v√† giao d·ªãch + th·ªëng k√™ RFM
@st.cache_data
def load_data():
    df_rfm = pd.read_csv("rfm.csv")
    df_giaodich = pd.read_csv("data_th.csv")

    rfm_stats = {
        "recency_min": df_rfm["Recency"].min(),
        "recency_max": df_rfm["Recency"].max(),
        "frequency_min": df_rfm["Frequency"].min(),
        "frequency_max": df_rfm["Frequency"].max(),
        "monetary_min": df_rfm["Monetary"].min(),
        "monetary_max": df_rfm["Monetary"].max(),
    }

    return df_rfm, df_giaodich, rfm_stats

# T·∫£i model v√† d·ªØ li·ªáu
model, scaler = load_model()
df_rfm, df_giaodich, rfm_stats = load_data()

# T√≠nh gi·ªõi h·∫°n nh·∫≠p
min_recency = max(0, rfm_stats["recency_min"] * 0.5)
max_recency = rfm_stats["recency_max"] * 1.5

min_frequency = max(0, rfm_stats["frequency_min"] * 0.5)
max_frequency = rfm_stats["frequency_max"] * 1.5

min_monetary = max(0, rfm_stats["monetary_min"] * 0.5)
max_monetary = rfm_stats["monetary_max"] * 1.5

# Giao di·ªán Streamlit
st.title("üîç D·ª± ƒëo√°n Ph√¢n kh√∫c Kh√°ch h√†ng theo RFM")

tab1, tab2 = st.tabs(["‚úçÔ∏è Nh·∫≠p tay 5 kh√°ch h√†ng", "üìÅ Ch·ªçn kh√°ch h√†ng t·ª´ d·ªØ li·ªáu"])

# ====== TAB 1: NH·∫¨P TAY ======
with tab1:
    st.write("Nh·∫≠p th√¥ng tin RFM cho 5 kh√°ch h√†ng. (Gi·ªõi h·∫°n theo d·ªØ li·ªáu hu·∫•n luy·ªán)")

    rfm_data = []
    for i in range(5):
        st.subheader(f"üìå Kh√°ch h√†ng {i+1}")
        st.markdown(f"""
        <div style='color:gray; font-size: 0.9em'>
        - Recency: {int(min_recency)} ‚Üí {int(max_recency)}<br>
        - Frequency: {int(min_frequency)} ‚Üí {int(max_frequency)}<br>
        - Monetary: {int(min_monetary)} ‚Üí {int(max_monetary)}
        </div>
        """, unsafe_allow_html=True)

        recency = st.number_input(
            f"Recency (ng√†y) - KH {i+1}", 
            min_value=int(min_recency), 
            max_value=int(max_recency), 
            value=int((min_recency + max_recency) // 2), 
            key=f"r{i}"
        )

        frequency = st.number_input(
            f"Frequency (s·ªë l·∫ßn mua) - KH {i+1}", 
            min_value=int(min_frequency), 
            max_value=int(max_frequency), 
            value=int((min_frequency + max_frequency) // 2), 
            key=f"f{i}"
        )

        monetary = st.number_input(
            f"Monetary (gi√° tr·ªã mua h√†ng) - KH {i+1}", 
            min_value=float(min_monetary), 
            max_value=float(max_monetary), 
            value=float((min_monetary + max_monetary) / 2), 
            key=f"m{i}"
        )

        rfm_data.append([recency, frequency, monetary])

    if st.button("üìä D·ª± ƒëo√°n c·ª•m kh√°ch h√†ng", key="btn_predict_5"):
        rfm_df = pd.DataFrame(rfm_data, columns=["Recency", "Frequency", "Monetary"])
        rfm_scaled = scaler.transform(rfm_df)
        clusters = model.predict(rfm_scaled)

        st.subheader("üéØ K·∫øt qu·∫£ d·ª± ƒëo√°n:")
        rfm_df["C·ª•m"] = clusters
        rfm_df["Ph√¢n lo·∫°i"] = rfm_df["C·ª•m"].map(cluster_labels)
        rfm_df["Chi·∫øn l∆∞·ª£c gi·ªØ ch√¢n"] = rfm_df["Ph√¢n lo·∫°i"].map(retention_strategies)

        st.dataframe(rfm_df)

# ====== TAB 2: CH·ªåN KH√ÅCH H√ÄNG T·ª™ D·ªÆ LI·ªÜU ======
with tab2:
    st.write("Ch·ªçn 1 trong 10 kh√°ch h√†ng ƒë·∫ßu ti√™n t·ª´ t·∫≠p d·ªØ li·ªáu ƒë·ªÉ xem ph√¢n t√≠ch chi ti·∫øt.")

    top_10_customers = df_rfm.head(10)
    customer_list = top_10_customers["Member_number"].tolist()
    selected_customer = st.selectbox("üßë‚Äçüíº Ch·ªçn kh√°ch h√†ng", customer_list)

    if selected_customer:
        customer_info = df_rfm[df_rfm["Member_number"] == selected_customer]
        rfm_values = customer_info[["Recency", "Frequency", "Monetary"]]
        scaled = scaler.transform(rfm_values)
        cluster = model.predict(scaled)[0]
        label = cluster_labels[cluster]
        strategy = retention_strategies[label]

        st.subheader("üìå Th√¥ng tin RFM:")
        st.write(customer_info)

        st.subheader("üì¶ Giao d·ªãch chi ti·∫øt:")
        giao_dich = df_giaodich[df_giaodich["Member_number"] == selected_customer]
        st.dataframe(giao_dich)

        st.subheader("üîÆ Ph√¢n lo·∫°i & G·ª£i √Ω chi·∫øn l∆∞·ª£c:")
        st.markdown(f"""
        - **Ph√¢n lo·∫°i:** `{label}`  
        - **Chi·∫øn l∆∞·ª£c gi·ªØ ch√¢n:** {strategy}
        """)
