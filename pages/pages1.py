import streamlit as st
import pandas as pd
import os
from datetime import datetime

# T√™n file l∆∞u tr·ªØ d·ªØ li·ªáu
DATA_FILE = "products.csv"

# Kh·ªüi t·∫°o d·ªØ li·ªáu n·∫øu file ch∆∞a t·ªìn t·∫°i
def init_data():
    if not os.path.exists(DATA_FILE):
        sample_data = {
            "ID": [1, 2, 3],
            "T√™n s·∫£n ph·∫©m": ["iPhone 13", "Samsung Galaxy S21", "Xiaomi Redmi Note 10"],
            "Lo·∫°i": ["ƒêi·ªán tho·∫°i", "ƒêi·ªán tho·∫°i", "ƒêi·ªán tho·∫°i"],
            "Gi√°": [20000000, 18000000, 5000000],
            "S·ªë l∆∞·ª£ng": [10, 15, 20],
            "Ng√†y nh·∫≠p": ["2023-01-15", "2023-02-20", "2023-03-10"]
        }
        df = pd.DataFrame(sample_data)
        df.to_csv(DATA_FILE, index=False)

# ƒê·ªçc d·ªØ li·ªáu t·ª´ file
def load_data():
    return pd.read_csv(DATA_FILE)

# L∆∞u d·ªØ li·ªáu v√†o file
def save_data(df):
    df.to_csv(DATA_FILE, index=False)

# T·∫°o ID m·ªõi
def generate_id(df):
    return df["ID"].max() + 1 if not df.empty else 1

# Giao di·ªán ch√≠nh
def main():
    st.title("üì¶ Qu·∫£n l√Ω S·∫£n ph·∫©m")
    st.write("·ª®ng d·ª•ng CRUDS (Create, Read, Update, Delete, Search) cho s·∫£n ph·∫©m")

    # Kh·ªüi t·∫°o d·ªØ li·ªáu
    init_data()
    df = load_data()

    # Sidebar cho c√°c ch·ª©c nƒÉng
    st.sidebar.title("Ch·ª©c nƒÉng")
    menu = st.sidebar.radio(
        "Menu",
        ["Xem t·∫•t c·∫£ s·∫£n ph·∫©m", "Th√™m s·∫£n ph·∫©m", "C·∫≠p nh·∫≠t s·∫£n ph·∫©m", "X√≥a s·∫£n ph·∫©m", "T√¨m ki·∫øm"]
    )

    # Xem t·∫•t c·∫£ s·∫£n ph·∫©m
    if menu == "Xem t·∫•t c·∫£ s·∫£n ph·∫©m":
        st.subheader("Danh s√°ch s·∫£n ph·∫©m")
        st.dataframe(df, use_container_width=True)

    # Th√™m s·∫£n ph·∫©m m·ªõi
    elif menu == "Th√™m s·∫£n ph·∫©m":
        st.subheader("Th√™m s·∫£n ph·∫©m m·ªõi")
        
        with st.form("add_form"):
            col1, col2 = st.columns(2)
            with col1:
                name = st.text_input("T√™n s·∫£n ph·∫©m")
                category = st.selectbox("Lo·∫°i", ["ƒêi·ªán tho·∫°i", "Laptop", "Tablet", "Ph·ª• ki·ªán"])
            with col2:
                price = st.number_input("Gi√°", min_value=0)
                quantity = st.number_input("S·ªë l∆∞·ª£ng", min_value=0)
            
            submitted = st.form_submit_button("Th√™m")
            
            if submitted:
                if not name:
                    st.error("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
                else:
                    new_product = {
                        "ID": generate_id(df),
                        "T√™n s·∫£n ph·∫©m": name,
                        "Lo·∫°i": category,
                        "Gi√°": price,
                        "S·ªë l∆∞·ª£ng": quantity,
                        "Ng√†y nh·∫≠p": datetime.now().strftime("%Y-%m-%d")
                    }
                    df = pd.concat([df, pd.DataFrame([new_product])], ignore_index=True)
                    save_data(df)
                    st.success("ƒê√£ th√™m s·∫£n ph·∫©m th√†nh c√¥ng!")
                    st.experimental_rerun()

    # C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    elif menu == "C·∫≠p nh·∫≠t s·∫£n ph·∫©m":
        st.subheader("C·∫≠p nh·∫≠t s·∫£n ph·∫©m")
        
        selected_id = st.selectbox("Ch·ªçn ID s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t", df["ID"].values)
        product = df[df["ID"] == selected_id].iloc[0]
        
        with st.form("update_form"):
            col1, col2 = st.columns(2)
            with col1:
                new_name = st.text_input("T√™n s·∫£n ph·∫©m", product["T√™n s·∫£n ph·∫©m"])
                new_category = st.selectbox(
                    "Lo·∫°i", 
                    ["ƒêi·ªán tho·∫°i", "Laptop", "Tablet", "Ph·ª• ki·ªán"],
                    index=["ƒêi·ªán tho·∫°i", "Laptop", "Tablet", "Ph·ª• ki·ªán"].index(product["Lo·∫°i"]))
            with col2:
                new_price = st.number_input("Gi√°", min_value=0, value=product["Gi√°"])
                new_quantity = st.number_input("S·ªë l∆∞·ª£ng", min_value=0, value=product["S·ªë l∆∞·ª£ng"])
            
            submitted = st.form_submit_button("C·∫≠p nh·∫≠t")
            
            if submitted:
                if not new_name:
                    st.error("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
                else:
                    df.loc[df["ID"] == selected_id, "T√™n s·∫£n ph·∫©m"] = new_name
                    df.loc[df["ID"] == selected_id, "Lo·∫°i"] = new_category
                    df.loc[df["ID"] == selected_id, "Gi√°"] = new_price
                    df.loc[df["ID"] == selected_id, "S·ªë l∆∞·ª£ng"] = new_quantity
                    save_data(df)
                    st.success("ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!")
                    st.experimental_rerun()

    # X√≥a s·∫£n ph·∫©m
    elif menu == "X√≥a s·∫£n ph·∫©m":
        st.subheader("X√≥a s·∫£n ph·∫©m")
        
        selected_id = st.selectbox("Ch·ªçn ID s·∫£n ph·∫©m c·∫ßn x√≥a", df["ID"].values)
        product = df[df["ID"] == selected_id].iloc[0]
        
        st.write("Th√¥ng tin s·∫£n ph·∫©m s·∫Ω x√≥a:")
        st.write(product)
        
        if st.button("X√≥a"):
            df = df[df["ID"] != selected_id]
            save_data(df)
            st.success("ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng!")
            st.experimental_rerun()

    # T√¨m ki·∫øm s·∫£n ph·∫©m
    elif menu == "T√¨m ki·∫øm":
        st.subheader("T√¨m ki·∫øm s·∫£n ph·∫©m")
        
        search_term = st.text_input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
        search_by = st.selectbox("T√¨m theo", ["T√™n s·∫£n ph·∫©m", "Lo·∫°i"])
        
        if search_term:
            if search_by == "T√™n s·∫£n ph·∫©m":
                result = df[df["T√™n s·∫£n ph·∫©m"].str.contains(search_term, case=False)]
            else:
                result = df[df["Lo·∫°i"].str.contains(search_term, case=False)]
            
            st.write(f"K·∫øt qu·∫£ t√¨m ki·∫øm ({len(result)} s·∫£n ph·∫©m):")
            st.dataframe(result, use_container_width=True)
        else:
            st.warning("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")

if __name__ == "__main__":
    main()    