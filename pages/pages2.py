import streamlit as st
import pandas as pd
import os
from datetime import datetime
from PIL import Image
import base64

# T√™n file l∆∞u tr·ªØ d·ªØ li·ªáu
DATA_FILE = "products.csv"
IMAGE_FOLDER = "product_images"

# T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh n·∫øu ch∆∞a t·ªìn t·∫°i
os.makedirs(IMAGE_FOLDER, exist_ok=True)

# Kh·ªüi t·∫°o d·ªØ li·ªáu n·∫øu file ch∆∞a t·ªìn t·∫°i
def init_data():
    if not os.path.exists(DATA_FILE):
        sample_data = {
            "ID": [1, 2, 3],
            "T√™n s·∫£n ph·∫©m": ["iPhone 13", "Samsung Galaxy S21", "Xiaomi Redmi Note 10"],
            "Lo·∫°i": ["ƒêi·ªán tho·∫°i", "ƒêi·ªán tho·∫°i", "ƒêi·ªán tho·∫°i"],
            "Gi√°": [20000000, 18000000, 5000000],
            "S·ªë l∆∞·ª£ng": [10, 15, 20],
            "M√¥ t·∫£": [
                "iPhone 13 v·ªõi m√†n h√¨nh Super Retina XDR, chip A15 Bionic",
                "Samsung Galaxy S21 v·ªõi camera ·∫•n t∆∞·ª£ng v√† hi·ªáu nƒÉng m·∫°nh m·∫Ω",
                "Xiaomi Redmi Note 10 gi√° r·∫ª nh∆∞ng ch·∫•t l∆∞·ª£ng"
            ],
            "Ng√†y nh·∫≠p": ["2023-01-15", "2023-02-20", "2023-03-10"],
            "·∫¢nh": ["", "", ""]
        }
        df = pd.DataFrame(sample_data)
        df.to_csv(DATA_FILE, index=False)

# ƒê·ªçc d·ªØ li·ªáu t·ª´ file
def load_data():
    return pd.read_csv(DATA_FILE)

# L∆∞u d·ªØ li·ªáu v√†o file
def save_data(df):
    df.to_csv(DATA_FILE, index=False)

# T·∫°o ID m·ªõi
def generate_id(df):
    return df["ID"].max() + 1 if not df.empty else 1

# L∆∞u ·∫£nh v√† tr·∫£ v·ªÅ t√™n file
def save_uploaded_image(uploaded_file, product_id):
    if uploaded_file is not None:
        file_ext = os.path.splitext(uploaded_file.name)[1]
        filename = f"{product_id}{file_ext}"
        filepath = os.path.join(IMAGE_FOLDER, filename)
        
        with open(filepath, "wb") as f:
            f.write(uploaded_file.getbuffer())
        return filename
    return ""

# Hi·ªÉn th·ªã ·∫£nh
def display_image(image_path, width=200):
    if image_path and os.path.exists(os.path.join(IMAGE_FOLDER, image_path)):
        img = Image.open(os.path.join(IMAGE_FOLDER, image_path))
        st.image(img, width=width)
    else:
        st.image("https://via.placeholder.com/200?text=No+Image", width=width)

# Hi·ªÉn th·ªã s·∫£n ph·∫©m d·∫°ng grid
def display_products_grid(df):
    cols_per_row = 3
    cols = st.columns(cols_per_row)
    
    for idx, row in df.iterrows():
        with cols[idx % cols_per_row]:
            st.markdown(f"**{row['T√™n s·∫£n ph·∫©m']}**")
            display_image(row['·∫¢nh'])
            st.markdown(f"**Gi√°:** {row['Gi√°']:,.0f} VND")
            st.markdown(f"**S·ªë l∆∞·ª£ng:** {row['S·ªë l∆∞·ª£ng']}")
            
            if st.button(f"Xem chi ti·∫øt", key=f"view_{row['ID']}"):
                st.session_state['view_product'] = row['ID']
            
            st.markdown("---")

# Hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m
def display_product_detail(product_id, df):
    product = df[df["ID"] == product_id].iloc[0]
    st.subheader(product["T√™n s·∫£n ph·∫©m"])
    
    col1, col2 = st.columns(2)
    with col1:
        display_image(product["·∫¢nh"], width=300)
    with col2:
        st.markdown(f"**Lo·∫°i:** {product['Lo·∫°i']}")
        st.markdown(f"**Gi√°:** {product['Gi√°']:,.0f} VND")
        st.markdown(f"**S·ªë l∆∞·ª£ng:** {product['S·ªë l∆∞·ª£ng']}")
        st.markdown(f"**Ng√†y nh·∫≠p:** {product['Ng√†y nh·∫≠p']}")
        st.markdown("**M√¥ t·∫£:**")
        st.write(product["M√¥ t·∫£"])
    
    if st.button("Quay l·∫°i danh s√°ch"):
        st.session_state.pop('view_product', None)
        st.experimental_rerun()

# Giao di·ªán ch√≠nh
def main():
    st.title("üõçÔ∏è C·ª≠a h√†ng S·∫£n ph·∫©m")
    st.write("·ª®ng d·ª•ng qu·∫£n l√Ω s·∫£n ph·∫©m v·ªõi giao di·ªán th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠")

    # Kh·ªüi t·∫°o d·ªØ li·ªáu
    init_data()
    df = load_data()

    # Sidebar cho c√°c ch·ª©c nƒÉng
    st.sidebar.title("Ch·ª©c nƒÉng")
    menu_options = [
        "Trang ch·ªß - Xem s·∫£n ph·∫©m",
        "Th√™m s·∫£n ph·∫©m",
        "C·∫≠p nh·∫≠t s·∫£n ph·∫©m",
        "X√≥a s·∫£n ph·∫©m",
        "T√¨m ki·∫øm s·∫£n ph·∫©m"
    ]
    menu = st.sidebar.radio("Menu", menu_options)

    # X·ª≠ l√Ω xem chi ti·∫øt s·∫£n ph·∫©m
    if 'view_product' in st.session_state:
        display_product_detail(st.session_state['view_product'], df)
        return

    # Trang ch·ªß - Hi·ªÉn th·ªã s·∫£n ph·∫©m
    if menu == "Trang ch·ªß - Xem s·∫£n ph·∫©m":
        st.subheader("Danh s√°ch s·∫£n ph·∫©m")
        display_products_grid(df)

    # Th√™m s·∫£n ph·∫©m m·ªõi
    elif menu == "Th√™m s·∫£n ph·∫©m":
        st.subheader("Th√™m s·∫£n ph·∫©m m·ªõi")
        
        with st.form("add_form"):
            col1, col2 = st.columns(2)
            with col1:
                name = st.text_input("T√™n s·∫£n ph·∫©m*")
                category = st.selectbox("Lo·∫°i*", ["ƒêi·ªán tho·∫°i", "Laptop", "Tablet", "Ph·ª• ki·ªán"])
                price = st.number_input("Gi√°*", min_value=0)
            with col2:
                quantity = st.number_input("S·ªë l∆∞·ª£ng*", min_value=0)
                image = st.file_uploader("·∫¢nh s·∫£n ph·∫©m", type=["jpg", "jpeg", "png"])
                date = st.date_input("Ng√†y nh·∫≠p*", datetime.now())
            
            description = st.text_area("M√¥ t·∫£ s·∫£n ph·∫©m")
            
            submitted = st.form_submit_button("Th√™m s·∫£n ph·∫©m")
            
            if submitted:
                if not name:
                    st.error("Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m")
                else:
                    new_id = generate_id(df)
                    image_filename = save_uploaded_image(image, new_id)
                    
                    new_product = {
                        "ID": new_id,
                        "T√™n s·∫£n ph·∫©m": name,
                        "Lo·∫°i": category,
                        "Gi√°": price,
                        "S·ªë l∆∞·ª£ng": quantity,
                        "M√¥ t·∫£": description,
                        "Ng√†y nh·∫≠p": date.strftime("%Y-%m-%d"),
                        "·∫¢nh": image_filename
                    }
                    df = pd.concat([df, pd.DataFrame([new_product])], ignore_index=True)
                    save_data(df)
                    st.success("ƒê√£ th√™m s·∫£n ph·∫©m th√†nh c√¥ng!")
                    st.balloons()
                    st.experimental_rerun()

    # C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    elif menu == "C·∫≠p nh·∫≠t s·∫£n ph·∫©m":
        st.subheader("C·∫≠p nh·∫≠t s·∫£n ph·∫©m")
        
        selected_id = st.selectbox("Ch·ªçn ID s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t", df["ID"].values)
        product = df[df["ID"] == selected_id].iloc[0]
        
        with st.form("update_form"):
            col1, col2 = st.columns(2)
            with col1:
                new_name = st.text_input("T√™n s·∫£n ph·∫©m*", product["T√™n s·∫£n ph·∫©m"])
                new_category = st.selectbox(
                    "Lo·∫°i*", 
                    ["ƒêi·ªán tho·∫°i", "Laptop", "Tablet", "Ph·ª• ki·ªán"],
                    index=["ƒêi·ªán tho·∫°i", "Laptop", "Tablet", "Ph·ª• ki·ªán"].index(product["Lo·∫°i"]))
                new_price = st.number_input("Gi√°*", min_value=0, value=product["Gi√°"])
            with col2:
                new_quantity = st.number_input("S·ªë l∆∞·ª£ng*", min_value=0, value=product["S·ªë l∆∞·ª£ng"])
                new_image = st.file_uploader("C·∫≠p nh·∫≠t ·∫£nh", type=["jpg", "jpeg", "png"])
                new_date = st.date_input("Ng√†y nh·∫≠p*", datetime.strptime(product["Ng√†y nh·∫≠p"], "%Y-%m-%d"))
            
            new_description = st.text_area("M√¥ t·∫£", product["M√¥ t·∫£"])
            
            submitted = st.form_submit_button("C·∫≠p nh·∫≠t")
            
            if submitted:
                if not new_name:
                    st.error("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
                else:
                    # C·∫≠p nh·∫≠t th√¥ng tin
                    df.loc[df["ID"] == selected_id, "T√™n s·∫£n ph·∫©m"] = new_name
                    df.loc[df["ID"] == selected_id, "Lo·∫°i"] = new_category
                    df.loc[df["ID"] == selected_id, "Gi√°"] = new_price
                    df.loc[df["ID"] == selected_id, "S·ªë l∆∞·ª£ng"] = new_quantity
                    df.loc[df["ID"] == selected_id, "M√¥ t·∫£"] = new_description
                    df.loc[df["ID"] == selected_id, "Ng√†y nh·∫≠p"] = new_date.strftime("%Y-%m-%d")
                    
                    # C·∫≠p nh·∫≠t ·∫£nh n·∫øu c√≥
                    if new_image is not None:
                        # X√≥a ·∫£nh c≈© n·∫øu t·ªìn t·∫°i
                        old_image = df.loc[df["ID"] == selected_id, "·∫¢nh"].values[0]
                        if old_image and os.path.exists(os.path.join(IMAGE_FOLDER, old_image)):
                            os.remove(os.path.join(IMAGE_FOLDER, old_image))
                        
                        # L∆∞u ·∫£nh m·ªõi
                        image_filename = save_uploaded_image(new_image, selected_id)
                        df.loc[df["ID"] == selected_id, "·∫¢nh"] = image_filename
                    
                    save_data(df)
                    st.success("ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!")
                    st.experimental_rerun()

    # X√≥a s·∫£n ph·∫©m
    elif menu == "X√≥a s·∫£n ph·∫©m":
        st.subheader("X√≥a s·∫£n ph·∫©m")
        
        selected_id = st.selectbox("Ch·ªçn ID s·∫£n ph·∫©m c·∫ßn x√≥a", df["ID"].values)
        product = df[df["ID"] == selected_id].iloc[0]
        
        st.write("Th√¥ng tin s·∫£n ph·∫©m s·∫Ω x√≥a:")
        col1, col2 = st.columns(2)
        with col1:
            display_image(product["·∫¢nh"])
        with col2:
            st.markdown(f"**T√™n:** {product['T√™n s·∫£n ph·∫©m']}")
            st.markdown(f"**Lo·∫°i:** {product['Lo·∫°i']}")
            st.markdown(f"**Gi√°:** {product['Gi√°']:,.0f} VND")
        
        if st.button("X√°c nh·∫≠n x√≥a"):
            # X√≥a ·∫£nh n·∫øu t·ªìn t·∫°i
            if product["·∫¢nh"] and os.path.exists(os.path.join(IMAGE_FOLDER, product["·∫¢nh"])):
                os.remove(os.path.join(IMAGE_FOLDER, product["·∫¢nh"]))
            
            # X√≥a s·∫£n ph·∫©m kh·ªèi dataframe
            df = df[df["ID"] != selected_id]
            save_data(df)
            st.success("ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng!")
            st.experimental_rerun()

    # T√¨m ki·∫øm s·∫£n ph·∫©m
    elif menu == "T√¨m ki·∫øm s·∫£n ph·∫©m":
        st.subheader("T√¨m ki·∫øm s·∫£n ph·∫©m")
        
        search_term = st.text_input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
        search_by = st.selectbox("T√¨m theo", ["T√™n s·∫£n ph·∫©m", "Lo·∫°i", "M√¥ t·∫£"])
        
        if search_term:
            if search_by == "T√™n s·∫£n ph·∫©m":
                result = df[df["T√™n s·∫£n ph·∫©m"].str.contains(search_term, case=False)]
            elif search_by == "Lo·∫°i":
                result = df[df["Lo·∫°i"].str.contains(search_term, case=False)]
            else:
                result = df[df["M√¥ t·∫£"].str.contains(search_term, case=False)]
            
            st.write(f"K·∫øt qu·∫£ t√¨m ki·∫øm ({len(result)} s·∫£n ph·∫©m):")
            display_products_grid(result)
        else:
            st.warning("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")

if __name__ == "__main__":
    main()